# -*- coding: utf-8 -*-
"""EDA_For_MNIST_Digit-recognition_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mwbK9vKwEO5DJqqSRVwGBJlXjFr4bf-i
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

"""**Importing the data**"""

train_data = pd.read_csv("train.csv") #reading the csv files using pandas
test_data = pd.read_csv("test.csv")

len(train_data)

train_data.head(10)

"""- In general, we have 42000 samples with 784 attributes this case, pixelsâ€”and a label for the digit each image stands for in each example. 
- Reconstructing the image from the vector of pixels is actually quite simple.
- By creating a square matrix out of the vector, and then utilizing an image to display it.
"""

# Commented out IPython magic to ensure Python compatibility.
# Import matplotlib
import matplotlib.pyplot as plt
# %matplotlib inline

# Plotting some samples as well as converting into matrix
four = train_data.iloc[3, 1:]
four.shape
four = four.values.reshape(28,28)
plt.imshow(four, cmap='gray')
plt.title("Digit 4")

# Plotting some samples as well as converting into matrix
five = train_data.iloc[8, 1:]
five.shape
five = five.values.reshape(28,28)
plt.imshow(five, cmap='gray')
plt.title("Digit 5")

# Plotting some samples as well as converting into matrix
three = train_data.iloc[7, 1:]
three.shape
three = three.values.reshape(28,28)
plt.imshow(three, cmap='gray')
plt.title("Digit 3")

# Plotting some samples as well as converting into matrix
seven = train_data.iloc[6, 1:]
seven.shape
seven = seven.values.reshape(28,28)
plt.imshow(seven, cmap='gray')
plt.title("Digit 7")

# Plotting some samples as well as converting into matrix
zero = train_data.iloc[1, 1:]
zero.shape
zero = zero.values.reshape(28,28)
plt.imshow(zero, cmap='gray')
plt.title("Digit 0")

"""**Let's build a count plot to see the count of all the labels.**"""

import seaborn as sns

sns.countplot(train_data.label)
print(list(train_data.label.value_counts().sort_index()))

